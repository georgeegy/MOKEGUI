import customtkinter as ctk
from tkinter import filedialog
import pyvisa as visa
import numpy as np
import pandas as pd
import time
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import threading
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


class MOKEGUI:

    def __init__(self):
        ctk.set_appearance_mode("system")
        ctk.set_default_color_theme("blue")

        self.calibration = None
        self.directory = None
        self.running = threading.Event()

        self.app = ctk.CTk()
        self.app.geometry("1200x810")
        self.app.title("MOKE")
        self.app.protocol("WM_DELETE_WINDOW", self.closing_window)

        frame = ctk.CTkFrame(master=self.app)
        frame.grid(row=0, column=0, sticky="nsew")

        self.start_button = ctk.CTkButton(master=self.app, text="Start", command=self.toggle)
        self.start_button.place(relx=0.80, rely=0.85, anchor=ctk.CENTER, relwidth=0.15, relheight=0.1)

        self.directory_button = ctk.CTkButton(master=self.app, text="Save Directory", command=self.save_directory)
        self.directory_button.place(relx=0.60, rely=0.85, anchor=ctk.CENTER, relwidth=0.15, relheight=0.1)

        self.calibration_button = ctk.CTkButton(master=self.app, text="Calibration File", command=self.calibration_file)
        self.calibration_button.place(relx=0.40, rely=0.85, anchor=ctk.CENTER, relwidth=0.15, relheight=0.1)

        self.data_button = ctk.CTkButton(master=self.app, text="Data File", command=self.data_file)     
        self.data_button.place(relx=0.20, rely=0.85, anchor=ctk.CENTER, relwidth=0.15, relheight=0.1)
       
        self.sample_name = ctk.CTkTextbox(master=frame, height=20, width=80)
        self.sample_name.grid(row=0, column=1)

        self.maxV = ctk.CTkTextbox(master=frame, height=20, width=80)
        self.maxV.grid(row=1, column=1, padx=10, pady=5)

        self.stepV = ctk.CTkTextbox(master=frame, height=20, width=80)
        self.stepV.grid(row=2, column=1, padx=10, pady=5)

        self.label_sample = ctk.CTkLabel(master=frame, text="Sample Name")
        self.label_sample.grid(row=0, column=0, padx=10, pady=5)

        self.label_max = ctk.CTkLabel(master=frame, text="Max Voltage (V)")
        self.label_max.grid(row=1, column=0, padx=10, pady=5)

        self.label_step = ctk.CTkLabel(master=frame, text="Step Voltage (V)")
        self.label_step.grid(row=2, column=0, padx=10, pady=5)

        self.figure, self.ax = plt.subplots(figsize=(6, 4))
        self.ax.set_xlabel("Field(T)")
        self.ax.set_ylabel("Moke Signal")
        self.ax.set_title(self.sample_name.get("1.0", "end-1c"))
        self.ax.grid("on")
        self.plot_canvas = FigureCanvasTkAgg(self.figure, master=self.app)
        self.plot_canvas.get_tk_widget().place(relx=0.5, rely=0.4, anchor=ctk.CENTER, relwidth=0.6, relheight=0.55)

        self.app.mainloop()

    def closing_window(self):
        self.running.set()
        self.app.quit()
        self.app.destroy()

    def save_directory(self):
        directory = filedialog.askdirectory()
        if directory:
            print(f"Selected Directory: {directory}")
            self.directory_button.configure(text=directory)
            self.directory = directory

    def calibration_file(self):
        calibration = filedialog.askopenfilename()
        if calibration:
            print(f"Selected Calibration File: {calibration}")
            self.calibration_button.configure(text=calibration)
            self.calibration = calibration
            
    def data_file(self):
        data_current = self.data_button.cget("text")
        if data_current == "Data File":
            path = filedialog.askopenfilename(filetypes=[("CSV files", "*.csv")])
            data = pd.read_csv(path)
            self.data_button.configure(text="Remove Data")
            self.ax.cla()
            self.ax.plot(data["Field (T)"], data["MOKE Signal"], "-b", label="Moke Signal")
            self.ax.set_xlabel("Field(T)")
            self.ax.set_ylabel("Moke Signal")
            self.ax.set_title(path.split("/")[-1])
            self.ax.grid("on")
            self.plot_canvas.draw()    
        else:
            self.ax.cla()
            self.ax.set_xlabel("Field(T)")
            self.ax.set_ylabel("Moke Signal")
            self.ax.grid("on")
            self.plot_canvas.draw()  
            self.data_button.configure(text="Data File")
        
        
    def toggle(self):
        current = self.start_button.cget("text")
        if current == "Start":
            self.start_button.configure(text="Stop")
            self.running.clear()
            self.ax.cla()
            self.ax.set_xlabel("Field(T)")
            self.ax.set_ylabel("Moke Signal")
            self.ax.grid("on")
            self.plot_canvas.draw() 
            threading.Thread(target=self.moke_code).start()
        else:
            self.start_button.configure(text="Start")
            self.running.set()

    def moke_code(self):
            rm = visa.ResourceManager()  # calls the differnt addresses for what is attached to the system
            sm = rm.open_resource('GPIB0::24::INSTR')  # adress and connection for the source meter
            # rm.list_resources()
            lia = rm.open_resource('GPIB0::13::INSTR')  # adress abd connection for the lock in amplifier
    
            dmm_01 = rm.open_resource('GPIB0::22::INSTR')
            smu = rm.open_resource('GPIB0::24::INSTR')  # adress and connection for the source meter
    
            def init_smu():
                smu.write('*RST')
                smu.write(':SOUR:FUNC CURR')
                smu.write(':SOUR:CURR:MODE FIXED')
                smu.write(':SOUR:CURR:RANG 0.002')
                smu.write(':SOUR:CURR:LEV 0.001')
                smu.write(':SENS:VOLT:PROT 5')
                smu.write(':SENS:FUNC "VOLT"')
                smu.write(':SENS:VOLT:RANG 2')
                smu.write(':FORM:ELEM VOLT')
                smu.write(':OUTP ON')
    
            init_smu()
    
            save_dir = self.directory
            sample_name = self.sample_name.get("1.0", "end-1c")
    
            calibrationfile = self.calibration
    
            # Generate fit equation for the calibration data
            model = LinearRegression()  # create a model
            calib_data = pd.read_csv(calibrationfile)
    
            hV = np.array(calib_data['Hall Voltage(V)'])
            Field = np.array(calib_data['Field (T)'])
    
            x = hV.reshape(-1, 1)
    
            model.fit(x, Field)
            slope = model.coef_[0]
            intercept = model.intercept_
    
            print('Calibration Fit, Field (T) = ', slope, '* Hall_voltage +', intercept)
    
            maxvolt = float(self.maxV.get("1.0", "end-1c"))
            voltstep = float(self.stepV.get("1.0", "end-1c"))
    
            loads = np.arange(0.0, maxvolt, voltstep)
            loads2 = np.arange(-1 * maxvolt, maxvolt, voltstep)
            loads3 = np.arange(maxvolt, -1 * maxvolt, -1 * voltstep)
    
            loadtotal = np.concatenate([loads3, loads2])
    
            def file_date():
                import datetime
                date_today_0 = datetime.datetime.today()
                date_today_1 = str(date_today_0).replace("-", "_").replace(" ", "_time_")
                date_today_2 = str(date_today_1).split('.')[0].replace(":", "_")
                return date_today_2
    
            # start of MOKE data collection
            ###############################################################################################################
            results = pd.DataFrame()  # creates empty data frame to save data to
            temps = pd.DataFrame()
            lia.write('AUXV 1, 10.0')
            time.sleep(5.0)
            lia.write('APHS')
            # time.sleep(3)
            lia.write('AUXV 1, 10.0')  # saturate the magnet
            time.sleep(1)
    
            for load in loadtotal:
                if self.running.wait(0):
                    break
                lia.write('AUXV 1 ,%.2f' % load)
                Hall_voltage = dmm_01.query(":MEAS:VOLT?")
                time.sleep(0.1)
    
                lia.write('STRT')  # this starts the data collection for the LIA
                FMR_string = lia.query(
                    'SNAP? 1,2')  # this collects the data from X and Y from the LIA and returns it as a string
                # X = FMR signal, Y = background
                FMR_data = FMR_string.split(',')  # this splits the string up accordingly to get the values into an array
                Hall_voltage = dmm_01.query(":MEAS:VOLT?")
                Field_value = (slope * float(Hall_voltage.split(',')[0]) + intercept)
                print(Field_value)
                temp = {"Voltage (V)": load,
                        "MOKE Signal": float(FMR_data[0]),
                        'MOKE BCKGD': float(FMR_data[1]),
                        'Hall Voltage(V)': float(Hall_voltage.split(',')[0]),
                        'Field (T)': Field_value}  # Creating a temporary array to store all of our values to before appending to dataframe.
                results = results.append(temp,
                                         # We build the results dataframe row by row by adding the temp array for every for loop/voltage
                                         ignore_index=True)  # Resets indexing so rows appear in the order appended/added.
    
                # Plot current data
                self.ax.cla()
                self.ax.plot(results["Field (T)"], results["MOKE Signal"], "-b", label="Moke Signal")
                self.ax.set_xlabel("Field(T)")
                self.ax.set_ylabel("Moke Signal")
                self.ax.set_title(sample_name)
                self.ax.grid("on")
                self.plot_canvas.draw()
    
                time.sleep(1.0)
    
            lia.write('AUXV 1 ,%.2f' % 0.0)
    
            file_date_today = file_date()
            results.to_csv(str(save_dir) + '/' + str(sample_name) + '_' + str(file_date_today) + '_results.csv',
                           index=False)
    
            # Six repetitions
            # start of MOKE data collection
            ################################################################################################################
            for n in np.arange(0.0, 6.0):
                if self.running.wait(0):
                    break
                results = pd.DataFrame()  # creates empty data frame to save data to
                temps = pd.DataFrame()
                lia.write('AUXV 1, 9.0')
                time.sleep(5.0)
                lia.write('APHS')
                # time.sleep(3)
                lia.write('AUXV 1, 9.0')  # saturate the magnet
                time.sleep(1)
                for load in loadtotal:
                    if self.running.wait(0):
                        break
                    lia.write('AUXV 1 ,%.2f' % load)
                    Hall_voltage = dmm_01.query(":MEAS:VOLT?")
                    time.sleep(0.1)
    
                    lia.write('STRT')  # this starts the data collection for the LIA
                    FMR_string = lia.query(
                        'SNAP? 1,2')  # this collects the data from X and Y from the LIA and returns it as a string
                    # X = FMR signal, Y = background
                    FMR_data = FMR_string.split(
                        ',')  # this splits the string up accordingly to get the values into an array
                    Hall_voltage = dmm_01.query(":MEAS:VOLT?")
                    Field_value = (slope * float(Hall_voltage.split(',')[0]) + intercept)
    
                    temp = {"Voltage (V)": load,
                            "MOKE Signal": float(FMR_data[0]),
                            'MOKE BCKGD': float(FMR_data[1]),
                            'Hall Voltage(V)': float(Hall_voltage.split(',')[0]),
                            'Field (T)': Field_value}  # Creating a temporary array to store all of our values to before appending to dataframe.
                    results = results.append(temp,
                                             # We build the results dataframe row by row by adding the temp array for every for loop/voltage
                                             ignore_index=True)  # Resets indexing so rows appear in the order appended/added.
                    # pd_append = {"Voltage": load,
                    #            "X": float(mylist[0]),
                    #             "Y": float(mylist[1])}
                    # temps = temps.append(pd_append, ignore_index=True)
    
                    # temp['X']=float(mylist[0])#this makes the X col of data in the data structure from the array mylist
                    # temp['Y']=float(mylist[1])#this makes the Y col of the data in the data strucutre from the array mylist
                    # results=results.append(temp,ignore_index=True)
    
                    # Plot current data
                    self.ax.cla()
                    self.ax.plot(results["Field (T)"], results["MOKE Signal"], "-b", label="Moke Signal")
                    self.ax.set_xlabel("Field(T)")
                    self.ax.set_ylabel("Moke Signal")
                    self.ax.set_title(sample_name)
                    self.ax.grid("on")
                    self.plot_canvas.draw()
    
                    time.sleep(1.0)
    
                plt.savefig(save_dir + sample_name + str(
                    file_date()) + '.png')  # Export FMR graph    ##NEED TO ADD SAMPLE TITLE AS USER INPUT
                lia.write('AUXV 1, 0')  # sets field to zero
    
            print("results saved to %s" % save_dir)
            print('Program Completed')
            self.running.clear()
            self.start_button.configure(text="Start")


MOKEGUI()
